working on:
-creating restaurants with meaningful zip code locations
  -should restaurants be clustered around major cities?
-create queries to elasticsearch?

Set up node.js express server
-figure out all inputs and outputs
-write tests to server

Set up MySQL database to store queries and lists

Generate fake queries to hit the express server
-fake queries need to be generated from list of users
-use lorem ipsum string or get real query strings from yelp?
-should have user zipcode as home town and mostly generate queries within digits of zipcode... but sometimes generate query wherver



Tests to write


http://ows.mundialis.de/services/service?
TOPO-OSM-WMS


-01 Nov 17: working on deployment 
- deploy mock recommendations service

-------------ELASTICSEARCH QUERIES----------------
// client.ping({
//   // ping usually has a 3000ms timeout
//   requestTimeout: 1000
// }, function (error) {
//   if (error) {
//     console.trace('elasticsearch cluster is down!');
//   } else {
//     console.log('All is well');
//   }
// });

// client.deleteByQuery({
//   index: 'restaurantprod'
// }, function (error) {
//   if (error) {
//     console.trace('elasticsearch index delete error');
//   } else {
//     console.log('elasticsearch index deleted');
//   }
// });

// client.create({
//   index: 'newmap',
//   type: 'type1',
//   id: 1,
//   body: {
//     testLocation: { lat: 30, lon: -75 },
//   }
// }, function (error) {
//   if (error) {
//     console.trace('error with post');
//   } else {
//     console.log('post was good');
//   }
// });


// client.create({
//   index: 'newmap',
//   type: 'item',
//   id: '1',
//   body: {
//     restaurantId: '1',
//     restaurantName: 'Chipotle',
//     address: '123 Main St',
//     city: 'Boston',
//     zipcode: '02453',
//     phone: '123-232-1233',
//     price: '3',
//     rating: '5',
//     tags: 'mexican, fastfood, burritos, taco'
//   }
// })
//   .then((response) => {
//     console.log('insertion successful ', response);
//   })
//   .catch((err) => {
//     console.log('insertion error ', error);
//   }); 

// client.search({
//   index: 'restaurant',
//   q: 'tags:ipsum'
// })
//   .then((response) => {
//     console.log('query successful ', response.hits.hits[9]);
//   })
//   .catch((err) => {
//     console.log('query error ', error);
//   }); 

// client.delete({
//   index: 'restaurant',
//   type: 'item',
//   id: '1'
// })
//   .then((response) => {
//     console.log('delete successful ', response);
//   })
//   .catch((err) => {
//     console.log('delete error ', error);
//   }); 

-------------------------ELASTICSEARCH CURL REQUESTS-----------------------------------

curl -XPUT 'https://search-app-server-ikcfhma3cq4ms4rs6xxnmraoe4.us-west-1.es.amazonaws.com/newmap?pretty' -H 'Content-Type: application/json' -d'
{
    "settings" : {
        "number_of_shards" : 1
    },
    "mappings" : {
        "type1" : {
            "properties" : {
                "testLocation" : { "type" : "geo_point" }
            }
        }
    }
}'

curl -XPUT 'https://search-app-server-ikcfhma3cq4ms4rs6xxnmraoe4.us-west-1.es.amazonaws.com/testmap?pretty' -H 'Content-Type: application/json' -d'
{
    "settings" : {
        "index" : {
            "number_of_shards" : 3,
            "number_of_replicas" : 2
        }
    }
}'

curl -XPUT 'https://search-app-server-ikcfhma3cq4ms4rs6xxnmraoe4.us-west-1.es.amazonaws.com/restaurantprod?pretty' -H 'Content-Type: application/json' -d'
 {
     "settings" : {
         "number_of_shards" : 1
     },
     "mappings" : {
         "restaurant" : {
             "properties" : {
                 "location" : { "type" : "geo_point" },
                 "time" : {"type" : "date"}
             }
         }
     }
}'